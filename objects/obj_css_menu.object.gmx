<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-99999</depth>
  <persistent>0</persistent>
  <parentName>ctr_indestructible</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Variables.

    // Stripe Position.
       side_x       = sprite_get_width(spr_card_css)*2; // Title cards X Position.
       side_y       = 64; //Title cards y Position. 
       
    // Stripe Position.
       name_x       = sprite_get_width(spr_name_css)*2; // Title cards X Position.
       name_y       = 84; //Title cards y Position. 
       
    // Banner Position.
       select_x     = sprite_get_width(spr_select_css)*2; // Banner's X Position.
       select_y     = 56; // Banner's Y Position.
       
    // Zone text.
       zone_scroll   = false;
       
    // Title Card State and misc. variables.
       title_state          = 1;    // State of the title card.
       title_delay          = 16;   // Delays the title card drawing.
       state_delay          = -1;   // Delays the state
       spin_frame           = 0;    // Image Speed
       selected             = 0;    // Selected or not, so the select can be changed to go
       
    // Char select
       self_on              = 0;
       alarm[0]             = 20;
       fade_in              = 1;
       image_speed          = 0.25;
       current_option       = 0;
       switch_timer         = 0;
       close_timer          = -1;
       activated            = 0;
       
    // Character values 
       drawsonic_x          = 81;
       drawtails_x          = 212;
       drawknuckles_x       = 458;
       drawamy_x            = -47;
       draw_alpha           = 0;
       
    // Character transparency
       drawsonic_alpha      = 1;
       drawtails_alpha      = 1;
       drawknuckles_alpha   = 1;
       drawamy_alpha        = 1;
       
    // Gear sprite
       gear_sprite          = spr_gear_r_css;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>self_on=1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Manage Alpha
    if (fade_in = 0)
    {
        if (draw_alpha &gt; 0)   draw_alpha -= 0.05;
        if (draw_alpha &lt; 0.05) draw_alpha = 0;
    }
    if (fade_in = 1)
    {
        if (draw_alpha &lt; 1)   draw_alpha += 0.05;
        if (draw_alpha &gt; 0.9) draw_alpha = 1; 
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Move Title card.
          
     if(state_delay &gt; 0)
     {
        state_delay -= 1;
     }
     if(state_delay == 0)
     {
        title_state = 2;
     }    
         
    if(title_delay &gt; 0)
    {
       title_delay -= 1;
    }
    else 
    {
       // Appear.
       if(title_state == 1)
       {
          if(side_x != 0)
          {
             side_x      = approach(side_x, 0,  16);
             name_x      = approach(name_x, 120, 14);
             select_x    = approach(select_x, 0, 18);
          }
          if(side_x == 0)
          {
             if(name_y != 147)
             {
                side_y    = approach(side_y, 127, 18);
                name_y    = approach(name_y, 147, 18);
                select_y  = approach(select_y, -7, 18);
                zone_scroll = true;
                state_delay = 2;
             }
          }  
       }
       // Disappear.
       else if(title_state == 2)
       {
          
          if(zone_scroll == true)
          {
             select_x -= 3.5;
          }
          
            side_y      = approach(side_y, 112, 12);
            name_y      = approach(name_y, 132, 12);
            select_y    = approach(select_y, 6, 12);
            
            // Character switch timer
            if (switch_timer &gt; 0)
            {
                switch_timer -= 1;
                if (drawsonic_x = 458 &amp;&amp; switch_direction = 1)  drawsonic_x = -160;
                if (drawsonic_x = -160 &amp;&amp; switch_direction = -1)  drawsonic_x = 458;
                if (drawtails_x = 458 &amp;&amp; switch_direction = 1)  drawtails_x = -160;
                if (drawtails_x = -160 &amp;&amp; switch_direction = -1)  drawtails_x = 458;
                if (drawknuckles_x = 458 &amp;&amp; switch_direction = 1)  drawknuckles_x = -160;
                if (drawknuckles_x = -160 &amp;&amp; switch_direction = -1)  drawknuckles_x = 458;
                if (drawamy_x = 458 &amp;&amp; switch_direction = 1)  drawamy_x = -160;
                if (drawamy_x = -160 &amp;&amp; switch_direction = -1)  drawamy_x = 458;
                
                drawsonic_x    += 12 * switch_direction;
                drawtails_x    += 12 * switch_direction;
                drawknuckles_x += 12 * switch_direction;
                drawamy_x      += 12 * switch_direction;
            }
            if (switch_timer == 0)
            {
                if (current_option = 0)
                {
                    drawsonic_x = 81;
                    drawtails_x = 212;
                    drawknuckles_x = 458;
                    drawamy_x = -47;
                }
                if (current_option = 1)
                {
                    drawsonic_x = -47;
                    drawtails_x = 81;
                    drawknuckles_x = 212;
                    drawamy_x = 458;
                }
                if (current_option = 2)
                {
                    drawsonic_x = 458;
                    drawtails_x = -47;
                    drawknuckles_x = 81;
                    drawamy_x = 212;
                }
                if (current_option = 3)
                {
                    drawsonic_x = 212;
                    drawtails_x = 458;
                    drawknuckles_x = -47;
                    drawamy_x = 81;
                }
            }
            
            // Select options
            if (self_on = 1 &amp;&amp; switch_timer = 0 &amp;&amp; activated != 1)
            {
                if(keyboard_check_pressed(global.ip_left) || (joy_hat_x(0) = -1 &amp;&amp; gmp.dpad_left == 0))
                {
                    current_option -= 1;
                    if (current_option &lt; 0)    current_option = 3;
                    switch_timer = 10;
                    switch_direction = 1;
                    gear_sprite = spr_gear_l_css;
                    image_index = 0;
                    image_speed = 0.2;
                    bv_audio_play(_general_menu_move, global.sfx_volume);
                }
                if(keyboard_check_pressed(global.ip_right) || (joy_hat_x(0) = 1 &amp;&amp; gmp.dpad_right == 0))
                {
                    current_option += 1;
                    if (current_option &gt; 3)    current_option = 0;
                    switch_timer = 10;
                    switch_direction = -1;
                    gear_sprite = spr_gear_r_css;
                    image_index = 0;
                    image_speed = 0.2;
                    bv_audio_play(_general_menu_move, global.sfx_volume);
                }
                if(keyboard_check_pressed(global.ip_button_a) || joy_pressed(0, global.dip_button_a) &amp;&amp; activated == 0)
                {
                    global.character_index = current_option;
                    if(select_x != 0)
                    {
                        select_x+=500;
                    }
                    activated = 1;
                    if (current_option = 0)    sprite_index = spr_sonic_css;
                    if (current_option = 1)    sprite_index = spr_tails_css;
                    if (current_option = 2)    sprite_index = spr_knux_css;
                    if (current_option = 3)    sprite_index = spr_amy_css;
                    image_index = 0;
                    image_speed = 0.2;
                    bv_audio_play(_general_select, global.sfx_volume);
                }
                if(keyboard_check_pressed(global.ip_button_s) &amp;&amp; activated == 0 
                &amp;&amp; !keyboard_check_pressed(global.ip_button_a) || joy_pressed(0, global.dip_button_a))
                {
                    global.character_index = CHAR_SHADOW;
                    if(select_x != 0)
                    {
                        select_x+=500;
                    }
                    image_index = 0;
                    image_speed = 0.2;
                    bv_audio_play(_general_select, global.sfx_volume);
                    with(instance_create(x, y, obj_fade_to))
                    {
                        fade_to = bv_stage_order();
                    }
                }
                if(keyboard_check_pressed(global.ip_button_b) || joy_pressed(0, global.dip_button_b))
                {
                    // Add a fade here later
                    with(instance_create(x, y, obj_fade_to))
                    {
                        fade_to = rm_title_screen;
                    }
                    bv_audio_play(_general_return, global.sfx_volume);
                }
             }
        }       
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Character stuff
if(title_state == 2)
{
    // Animation end
    if (image_speed != 0 &amp;&amp; round(image_index) = image_number -1)
    {
        image_speed = 0;
        image_index = image_number -1;
        
        close_timer = 30;
    }
}

    // Menu closing timer
    if (close_timer &gt; 0)    close_timer -= 1;
    
        // Go to Stage Menu
    if (close_timer == 0)
    {
        close_timer = -1;
        room_goto(bv_stage_order());
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw elements.
  
 // Spinning Thing
    draw_sprite(gear_sprite, 0, view_xview+51, view_yview+3);
 
 // Card
    draw_sprite(spr_card_css, current_option, view_xview+side_x, view_yview+side_y);
 
 // Name    
    draw_sprite(spr_name_css, current_option, view_xview+name_x, view_yview+name_y);

 // Zone Name (English)
    for(i=0; i&lt;10; i+=1)
    {
        draw_sprite(spr_select_css, 0, view_xview+select_x+(i*sprite_get_width(spr_select_css)), view_yview+select_y);
    }
    if(i == 10)
    {
        if(activated = 0)
        {   
            draw_sprite_tiled_horizontal(spr_select_css, 0, view_xview+select_x+(i*sprite_get_width(spr_select_css)), view_yview+select_y, 1, 1, 0, c_white, 1);
        }
        else
        {
            draw_sprite_tiled_horizontal(spr_ok_css, 0, view_xview+select_x+(i*sprite_get_width(spr_select_css)), view_yview+select_y, 1, 1, 0, c_white, 1);
        }
    }
    
    if(title_state == 2)
    {
        if(activated != 1)
        {
            if (current_option = 0)    drawsonic_alpha = draw_alpha;
            else    drawsonic_alpha = draw_alpha-0.5;
            if (current_option = 1)    drawtails_alpha = draw_alpha;
            else    drawtails_alpha = draw_alpha-0.5;
            if (current_option = 2)    drawknuckles_alpha = draw_alpha;
            else    drawknuckles_alpha = draw_alpha-0.5;
            if (current_option = 3)    drawamy_alpha = draw_alpha;
            else    drawamy_alpha = draw_alpha-0.5;
        
            draw_sprite_ext(spr_sonic_css, 0, drawsonic_x, 30, 1, 1, 0, c_white, drawsonic_alpha);
            draw_sprite_ext(spr_tails_css, 0, drawtails_x, 30, 1, 1, 0, c_white, drawtails_alpha);
            draw_sprite_ext(spr_knux_css, 0, drawknuckles_x, 30, 1, 1, 0, c_white, drawknuckles_alpha);
            draw_sprite_ext(spr_amy_css, 0, drawamy_x, 30, 1, 1, 0, c_white, drawamy_alpha);
        }
        else
        {
            switch(current_option)
            {
                case 0:
                {
                    draw_sprite(sprite_index, round(image_index), drawsonic_x, 30);
                    draw_sprite_ext(spr_tails_css, 0, drawtails_x, 30, 1, 1, 0, c_white, drawtails_alpha);
                    draw_sprite_ext(spr_knux_css, 0, drawknuckles_x, 30, 1, 1, 0, c_white, drawknuckles_alpha);
                    draw_sprite_ext(spr_amy_css, 0, drawamy_x, 30, 1, 1, 0, c_white, drawamy_alpha);
                    break;
                }
                case 1: 
                {
                    draw_sprite_ext(spr_sonic_css, 0, drawsonic_x, 30, 1, 1, 0, c_white, drawsonic_alpha);
                    draw_sprite(sprite_index, round(image_index), drawtails_x, 30);
                    draw_sprite_ext(spr_knux_css, 0, drawknuckles_x, 30, 1, 1, 0, c_white, drawknuckles_alpha);
                    draw_sprite_ext(spr_amy_css, 0, drawamy_x, 30, 1, 1, 0, c_white, drawamy_alpha);
                    break;
                }
                case 2: 
                {
                    draw_sprite_ext(spr_sonic_css, 0, drawsonic_x, 30, 1, 1, 0, c_white, drawsonic_alpha);
                    draw_sprite_ext(spr_tails_css, 0, drawtails_x, 30, 1, 1, 0, c_white, drawtails_alpha);
                    draw_sprite(sprite_index, round(image_index), drawknuckles_x, 30);
                    draw_sprite_ext(spr_amy_css, 0, drawamy_x, 30, 1, 1, 0, c_white, drawamy_alpha);
                    break;
                }
                case 3: 
                {
                    draw_sprite_ext(spr_sonic_css, 0, drawsonic_x, 30, 1, 1, 0, c_white, drawsonic_alpha);
                    draw_sprite_ext(spr_tails_css, 0, drawtails_x, 30, 1, 1, 0, c_white, drawtails_alpha);
                    draw_sprite_ext(spr_knux_css, 0, drawknuckles_x, 30, 1, 1, 0, c_white, drawknuckles_alpha);
                    draw_sprite(sprite_index, round(image_index), drawamy_x, 30);
                    break;
                }
            }
        }
        // Arrows
        draw_sprite(spr_arrows_css, -1, 0, 0);
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
