<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Variables
menu_option  = 0;
menu_active  = 1;
option_delay = 30;
option_bind  = 0;
bind_check   = 0;
bind_status  = 1;
bind_key     = "";
option_ended = 0;
text_draw_x  = 25;
cursor_pos_x = 9;
cursor_pos_y = 29;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Center screen. (For GMS)
  
    window_center();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Change Display config.

 // Scale:
    if(global.display_fullscreen == false)
    {
       window_set_size(global.display_width * global.display_scale, global.display_height * global.display_scale)
       if(window_get_fullscreen() == true)
       {
          window_set_fullscreen(false);
       }
       alarm[1] = 5;
    }
    else
    {
       window_set_size(global.display_width, global.display_height)    
       window_set_fullscreen(true);
    }
    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Modes
if(menu_active == 1)
{
    if(keyboard_check_pressed(global.ip_down) || (joy_hat_y(0) = 1 &amp;&amp; gmp.dpad_down == 0))
    {
        if(menu_option &lt; 7)
        {
            menu_option += 1;
        }
        else
        {
            menu_option = 0;
        }
        bv_audio_play(_general_score_add, global.sfx_volume); 
    }
    if(keyboard_check_pressed(global.ip_up) || (joy_hat_y(0) = -1 &amp;&amp; gmp.dpad_up == 0))
    {
        if(menu_option &gt; 0)
        {
            menu_option -= 1;
        }
        else
        {
            menu_option = 7;
        }
        bv_audio_play(_general_score_add, global.sfx_volume); 
    }
    
    switch(menu_option)
    {
        // Window size
        case 0:
        {
            if(keyboard_check_pressed(global.ip_left) || (joy_hat_x(0) = -1) &amp;&amp; gmp.dpad_left == 0)
            {
                bv_audio_play(_general_score_add, global.sfx_volume); 
                if(global.display_scale &gt; 1)
                {
                    global.display_scale -= 1;
                }
                else
                {
                    global.display_scale = 3;
                }          
                alarm[0] = 5;
            }
            if(keyboard_check_pressed(global.ip_right) || (joy_hat_x(0) = 1 &amp;&amp; gmp.dpad_right == 0))
            {
                bv_audio_play(_general_score_add, global.sfx_volume);
                if(global.display_scale &lt; 3)
                {
                    global.display_scale += 1;
                }
                else
                {
                    global.display_scale = 1;
                }       
                alarm[0] = 5;
            }
            break; 
        }
        // Full screen
        case 1:
        {
            if(keyboard_check_pressed(global.ip_left) || (joy_hat_x(0) = -1) &amp;&amp; gmp.dpad_left == 0)
            {
                bv_audio_play(_general_score_add, global.sfx_volume); 
                if(global.display_fullscreen == 1)
                {
                    global.display_fullscreen = 0;
                }
                else
                {
                    global.display_fullscreen = 1;
                }
                
            }
            if(keyboard_check_pressed(global.ip_right) || (joy_hat_x(0) = 1 &amp;&amp; gmp.dpad_right == 0))
            {
                bv_audio_play(_general_score_add, global.sfx_volume);
                if(global.display_fullscreen == 1)
                {
                    global.display_fullscreen = 0;
                }
                else
                {
                    global.display_fullscreen = 1;
                }
            }
            break; 
        }
        // BGM Volume
        case 2:
        {
            if(keyboard_check(global.ip_left) || (joy_hat_x(0) = -1) &amp;&amp; gmp.dpad_left == 0)
            {
                bv_audio_play(_general_score_add, global.sfx_volume); 
                sfx.backup_bgm_volume -= 0.01;
                if(sfx.backup_bgm_volume &lt; 0.01)
                {
                    sfx.backup_bgm_volume = 0;
                }
            }
            if(keyboard_check(global.ip_right) || (joy_hat_x(0) = 1 &amp;&amp; gmp.dpad_right == 0))
            {
                bv_audio_play(_general_score_add, global.sfx_volume);
                sfx.backup_bgm_volume += 0.01;
                if(sfx.backup_bgm_volume &gt;= 1)
                {
                    sfx.backup_bgm_volume = 1;
                }
            }
            break;    
        }
        // SFX Volume
        case 3:
        {
            if(keyboard_check(global.ip_left) || (joy_hat_x(0) = -1) &amp;&amp; gmp.dpad_left == 0)
            {
                bv_audio_play(_general_score_add, global.sfx_volume); 
                global.sfx_volume -= 0.01;
                if(global.sfx_volume &lt; 0.01)
                {
                    global.sfx_volume = 0;
                }
            }
            if(keyboard_check(global.ip_right) || (joy_hat_x(0) = 1 &amp;&amp; gmp.dpad_right == 0))
            {
                bv_audio_play(_general_score_add, global.sfx_volume);
                global.sfx_volume += 0.01;
                if(global.sfx_volume &gt;= 1)
                {
                    global.sfx_volume = 1;
                }
            }
            break; 
        }
        // EV Volume
        case 4:
        {
            if(keyboard_check(global.ip_left) || (joy_hat_x(0) = -1) &amp;&amp; gmp.dpad_left == 0)
            {
                bv_audio_play(_general_score_add, global.sfx_volume); 
                global.ev_volume -= 0.01;
                if(global.ev_volume &lt; 0.01)
                {
                    global.ev_volume = 0;
                }
            }
            if(keyboard_check(global.ip_right) || (joy_hat_x(0) = 1 &amp;&amp; gmp.dpad_right == 0))
            {
                bv_audio_play(_general_score_add, global.sfx_volume);
                global.ev_volume += 0.01;
                if(global.ev_volume &gt;= 1)
                {
                    global.ev_volume = 1;
                }
            }
            break;  
        }
        // Change your keys
        case 5:
        {
            if(keyboard_check_pressed(global.ip_button_a) || joy_pressed(0, global.dip_button_a))
            {
                option_delay = 30;
                option_bind  = 1;
            }
            break;    
        }
        // Change your gamepad controls
        case 6:
        {
            /*if(global.dip_exists == 1)
            {
                if(keyboard_check_pressed(global.ip_button_a))
                {
                   option_delay = 30;
                   option_bind  = 2;
                } 
            }  
            else
            {*/
                if(keyboard_check_pressed(global.ip_button_a) || joy_pressed(0, global.dip_button_a))
                {
                    bv_audio_play(_general_error, global.sfx_volume);
                }
            //}
            break;    
        }
        // Return
        case 7:
        {
            if(keyboard_check_pressed(global.ip_button_a) || joy_pressed(0, global.dip_button_a))
            {
                with(instance_create(x, y, obj_fade_to))
                {
                    fade_to = rm_title_screen;
                }
                bv_config_save_display();
                bv_config_save_audio();
                bv_config_save_input();
                bv_config_save_gameplay();
                menu_active = 0;
            }
            break;    
        }
    }
    global.setting_display_scale          = global.display_scale;
    global.setting_display_fullscreen     = global.display_fullscreen;
    global.setting_music_vol              = sfx.backup_bgm_volume;
    global.setting_sound_vol              = global.sfx_volume;
    global.setting_event_vol              = global.ev_volume;
    global.setting_input_up               = global.ip_up;
    global.setting_input_down             = global.ip_down;
    global.setting_input_left             = global.ip_left;
    global.setting_input_right            = global.ip_right;
    global.setting_input_button_a         = global.ip_button_a;
    global.setting_input_button_b         = global.ip_button_b;
    global.setting_input_button_s         = global.ip_button_s;
    global.setting_input_gamepad_button_a = global.dip_button_a;
    global.setting_input_gamepad_button_b = global.dip_button_b;
    global.setting_input_gamepad_button_s = global.dip_button_s;   
}

 
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Keyboard rebind.
    if(option_bind == 1)
    {
       if(bind_status == 8)
       {
          option_bind  = 0;
          bind_status  = 1;
          option_delay = 30;
       }       
       switch(bind_status)
       {
              case 1: { bind_key = "UP";      break; }
              case 2: { bind_key = "DOWN";    break; }
              case 3: { bind_key = "LEFT";    break; }
              case 4: { bind_key = "RIGHT";   break; }
              case 5: { bind_key = "ACTION";  break; }
              case 6: { bind_key = "SPECIAL"; break; }
              case 7: { bind_key = "ENTER";   break; }
       }       
       if(option_delay == 0)
       {
          bind_check = keyboard_key;
       }
       if(bind_check != 0 &amp;&amp; option_delay == 0)
       {
           switch(bind_status)
           {
                  case 1: { global.ip_up         = bind_check; option_delay = 30; bind_status = 2; keyboard_clear(vk_anykey);  break; }
                  case 2: { global.ip_down       = bind_check; option_delay = 30; bind_status = 3; keyboard_clear(vk_anykey);  break; }               
                  case 3: { global.ip_left       = bind_check; option_delay = 30; bind_status = 4; keyboard_clear(vk_anykey);  break; }        
                  case 4: { global.ip_right      = bind_check; option_delay = 30; bind_status = 5; keyboard_clear(vk_anykey);  break; }         
                  case 5: { global.ip_button_a   = bind_check; option_delay = 30; bind_status = 6; keyboard_clear(vk_anykey);  break; }
                  case 6: { global.ip_button_b   = bind_check; option_delay = 30; bind_status = 7; keyboard_clear(vk_anykey);  break; }    
                  case 7: { global.ip_button_s   = bind_check; option_delay = 30; bind_status = 8; keyboard_clear(vk_anykey);  break; }                                                                                      
           }
       }       
    }
    
 // Delay.
    if(option_delay != 0)
    {
       option_delay -= 1;
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Gamepad rebind.

    if(option_bind == 2)
    {
       if(bind_status == 4)
       {
          option_bind  = 0;
          bind_status  = 1;
          option_delay = 30;
       }       
       switch(bind_status)
       {
              case 1: { bind_key = "ACTION";   break; }
              case 2: { bind_key = "SPECIAL";  break; }
              case 3: { bind_key = "ENTER";    break; }
       }       
       if(option_delay == 0)
       {
          bind_check = gamepad_get_button();
       }
       if(bind_check != 0 &amp;&amp; option_delay == 0)
       {
           switch(bind_status)
           {
                  case 1: { global.dip_button_a = bind_check; option_delay = 30; bind_status = 2; break; }
                  case 2: { global.dip_button_b = bind_check; option_delay = 30; bind_status = 3; break; }               
                  case 3: { global.dip_button_s = bind_check; option_delay = 30; bind_status = 4; break; }                                                                                        
           }
       }       
    }
    
 // Delay.
    if(option_delay != 0)
    {
       option_delay -= 1;
    }
 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Drawing the title
// Check if initialized and if not then draw the press start.

    draw_set_font(global.font_menu);
    draw_set_halign(fa_left);
    draw_set_color(c_white);
    
    if(option_bind == 0)
    {
        draw_sprite(spr_options_cursor, 0, cursor_pos_x, cursor_pos_y);
        if(menu_option = 0)
        {
            cursor_pos_y = 29;
            draw_text(text_draw_x+5, 32, "SCREEN SIZE");
        }
        else
        {
            draw_text(text_draw_x, 32, "SCREEN SIZE");
        }
        if(menu_option = 1)
        {    
            cursor_pos_y = 45;
            draw_text(text_draw_x+5, 48, "FULLSCREEN");
        }
        else
        {    
            draw_text(text_draw_x, 48, "FULLSCREEN");
        }
        if(menu_option = 2)
        {
            cursor_pos_y = 61;
            draw_text(text_draw_x+5, 64, "BGM VOLUME");
        }
        else
        {
            draw_text(text_draw_x, 64, "BGM VOLUME");
        }
        if(menu_option = 3)
        {
            cursor_pos_y = 77;
            draw_text(text_draw_x+5, 80, "SFX VOLUME");
        }
        else
        {
            draw_text(text_draw_x, 80, "SFX VOLUME");
        }
        if(menu_option = 4)
        {
            cursor_pos_y = 93;
            draw_text(text_draw_x+5, 96, "EVENT VOLUME");
        }
        else
        {
            draw_text(text_draw_x, 96, "EVENT VOLUME");
        }
        if(menu_option = 5)
        {
            cursor_pos_y = 109;
            draw_text(text_draw_x+5, 112, "KEYBOARD CONFIG.");
        }
        else
        {
            draw_text(text_draw_x, 112, "KEYBOARD CONFIG.");
        }
        if(menu_option = 6)
        {
            cursor_pos_y = 125;
            draw_text(text_draw_x+5, 128, "GAMEPAD CONFIG.");
        }
        else
        {
            draw_text(text_draw_x, 128, "GAMEPAD CONFIG.");
        }
        if(menu_option = 7)
        {
            cursor_pos_y = 141;
            draw_text(text_draw_x+5, 144, "END");
        }
        else
        {
            draw_text(text_draw_x, 144, "END");
        }
        
        draw_set_halign(fa_right);
        draw_text(219, 32, string(global.display_width * global.display_scale)+"X"+string(global.display_height * global.display_scale));
        switch(global.display_fullscreen)
        {
            case 0: draw_text(219, 48, "NO"); break;
            case 1: draw_text(219, 48, "YES"); break;
        }
        draw_text(219, 64, string(max(floor(sfx.backup_bgm_volume*100),min(0))));
        draw_text(219, 80, string(max(floor(global.sfx_volume*100),min(0))));
        draw_text(219, 96, string(max(floor(global.ev_volume*100),min(0))));
        draw_set_halign(fa_left); 
    }
    if(option_bind &gt; 0)
    {
        draw_set_halign(fa_center);
        draw_text(global.display_width/2, global.display_height/2, "PRESS ANY KEY FOR:"+string(bind_key))                       
    }
    draw_set_halign(-1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
