<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>ico_audio</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>ctr_indestructible</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init.
    
 // Fade Variables:
    clear_bgm    = false; // Used to set the bgm volume to 0 when the stage has been cleared.
    fadeout_flag = false; // Flag used to fade out audio.
    clear_fade   = false; // Used to fade out the sfx volume when the stage has been cleared.
    death_fade   = false; // Used to fade out the bgm and sfx volume when the character has died.
        
    global.bgm_volume = 1;
    global.sfx_volume = 1;
    global.ev_volume  = 1;
    
 // Make a backup variable for volumes:
    backup_bgm_volume = global.bgm_volume;
    backup_sfx_volume = global.sfx_volume;
    backup_ev_volume  = global.ev_volume;
        
 // Music Variables:
    global.bgm_handle = -1; // Set/Current BGM Handle.
    bgm_loop_start    = -1; // Set the BGMs Loop Start. (in %)
    bgm_loop_end      = -1; // Set the BGMs Loop End. (in %)
    bgm_hz            =  0; // HZ Rate of the bgm, required for looping.

    _BGM = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Loop music using samples.

   if(bgm_loop_start != -1)
   {
      if(global.bgm_handle != -1)
      {
         if(audio_sound_get_track_position(global.bgm_handle) &gt;= bgm_loop_end/bgm_hz)
         {
            audio_sound_set_track_position(global.bgm_handle, bgm_loop_start/bgm_hz);
            show_debug_message(1)
         }     
      } 
   }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Credits volume
if(instance_exists(obj_credits_screen))
{
    if(obj_credits_screen.credit_numb &gt;= obj_credits_screen.credit_fade_music)
    {
        if(global.bgm_volume != 0)
        {
            global.bgm_volume -= 0.05;
        }
        else if(global.bgm_volume &lt;= 0.1)
        {
            bv_audio_stop(global.bgm_handle);
            global.bgm_handle = -1;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Volume changing.
 // Some sounds or events cause the bgm or sfx volume to change, this script will handle it.
 
 // Exit when the results are on screen.
 
    if(instance_exists(obj_results) &amp;&amp; clear_bgm == false)
    {
       clear_bgm = true;    
       audio_stop_all();
       global.bgm_volume = backup_bgm_volume;
       global.sfx_volume = backup_bgm_volume;      
       bv_audio_play(_ev_act_clear, global.ev_volume);    
       exit;
    }
    if(clear_bgm  == true)
    {
       exit;
    } 
    
    if(fadeout_flag == false)
    {
       if(global.bgm_handle != -1)
       {
       if(bv_audio_is_playing(_ev_life) || bv_audio_is_playing(_ev_sneakers) || bv_audio_is_playing(_ev_invincibility) 
       || bv_audio_is_playing(_ev_drown) || bv_audio_is_playing(_general_emerald) 
       || bv_audio_is_playing(_ev_super))
       { 
          if(global.bgm_volume != 0)
          {
             global.bgm_volume = 0;
          }
       }
       else
       {
          if(global.bgm_volume &lt; backup_bgm_volume)
          {
             global.bgm_volume += 0.01;
          }
          else
          {
             global.bgm_volume = backup_bgm_volume;
          }
       }    
       bv_audio_set_volume(global.bgm_handle, global.bgm_volume);
       }
    
    // Change the volume of certain events/jingles when the 1UP sound is playing.
      if(bv_audio_is_playing(_ev_life))
      {
         // Sneakers:
         if(bv_audio_is_playing(_ev_sneakers))
         {
            if(bv_audio_get_volume(_ev_sneakers) != 0)
            {
               bv_audio_set_volume(_ev_sneakers, 0);
            }
         }
         // Invincibility:
         if(bv_audio_is_playing(_ev_invincibility))
         {
            if(bv_audio_get_volume(_ev_invincibility) != 0)
            {
               bv_audio_set_volume(_ev_invincibility, 0);
            }
         }  
         // Drown:
         if(bv_audio_is_playing(_ev_drown))
         {
            if(bv_audio_get_volume(_ev_drown) != 0)
            {
               bv_audio_set_volume(_ev_drown, 0);
            }
         } 
         // Super Sonic:
         if(bv_audio_is_playing(_ev_super))
         {
            if(bv_audio_get_volume(_ev_super) != 0)
            {
               bv_audio_set_volume(_ev_super, 0);
            }
         }                 
      }
      else
      {
         // Sneakers:
         if(bv_audio_is_playing(_ev_sneakers))
         {
            if(bv_audio_get_volume(_ev_sneakers) &lt; global.ev_volume)
            {
               bv_audio_set_volume(_ev_sneakers, bv_audio_get_volume(_ev_sneakers)+0.01);
            }
            else if(bv_audio_get_volume(_ev_sneakers) &gt; global.ev_volume)
            {
                    bv_audio_set_volume(_ev_sneakers, global.ev_volume);          
            }
         }   
         // Invincibility:
         if(bv_audio_is_playing(_ev_invincibility))
         {
            if(bv_audio_get_volume(_ev_invincibility) &lt; global.ev_volume)
            {
               bv_audio_set_volume(_ev_invincibility, bv_audio_get_volume(_ev_invincibility)+0.01);
            }
            else if(bv_audio_get_volume(_ev_invincibility) &gt; global.ev_volume)
            {
                    bv_audio_set_volume(_ev_invincibility, global.ev_volume);          
            }
         }    
         // Drown:
         if(bv_audio_is_playing(_ev_drown))
         {
            if(bv_audio_get_volume(_ev_drown) &lt; global.ev_volume)
            {
               bv_audio_set_volume(_ev_drown, bv_audio_get_volume(_ev_drown)+0.01);
            }
            else if(bv_audio_get_volume(_ev_drown) &gt; global.ev_volume)
            {
                    bv_audio_set_volume(_ev_drown, global.ev_volume);          
            }
         }  
         // Super Sonic:
         if(bv_audio_is_playing(_ev_super))
         {
            if(bv_audio_get_volume(_ev_super) &lt; global.ev_volume)
            {
               bv_audio_set_volume(_ev_super, bv_audio_get_volume(_ev_super)+0.01);
            }
            else if(bv_audio_get_volume(_ev_super) &gt; global.ev_volume)
            {
                    bv_audio_set_volume(_ev_super, global.ev_volume);          
            }
         }                  
      }
      
   // Mute jingles when the invincibility or drowning jingle is playing.
      if(bv_audio_is_playing(_ev_invincibility) || bv_audio_is_playing(_ev_drown) 
      || bv_audio_is_playing(_ev_super))
      { 
         // Sneakers:
         if(bv_audio_is_playing(_ev_sneakers))
         {
            if(bv_audio_get_volume(_ev_sneakers) != 0)
            {
               bv_audio_set_volume(_ev_sneakers, 0);
            }
         }
         // Invincibility:
         if(bv_audio_is_playing(_ev_invincibility) &amp;&amp; bv_audio_is_playing(_ev_drown))
         {
            if(bv_audio_get_volume(_ev_invincibility) != 0)
            {
               bv_audio_set_volume(_ev_invincibility, 0);
            }
         }      
      }
      else
      {
         // Sneakers:
         if(bv_audio_is_playing(_ev_sneakers))
         {
            if(bv_audio_get_volume(_ev_sneakers) &lt; global.ev_volume)
            {
               bv_audio_set_volume(_ev_sneakers, bv_audio_get_volume(_ev_sneakers)+0.01);
            }
            else if(bv_audio_get_volume(_ev_sneakers) &gt; global.ev_volume)
            {
                    bv_audio_set_volume(_ev_sneakers, global.ev_volume);          
            }
         }   
         // Invincibility:
         if(bv_audio_is_playing(_ev_invincibility) &amp;&amp; !bv_audio_is_playing(_ev_drown))
         {
            if(bv_audio_get_volume(_ev_invincibility) &lt; global.ev_volume)
            {
               bv_audio_set_volume(_ev_invincibility, bv_audio_get_volume(_ev_invincibility)+0.01);
            }
            else if(bv_audio_get_volume(_ev_invincibility) &gt; global.ev_volume)
            {
                    bv_audio_set_volume(_ev_invincibility, global.ev_volume);          
            }
         }     
      }     
      
   }
   else
   {
      if(global.bgm_volume &gt; 0.0)
      {
         global.bgm_volume -= 0.01;
      }
      else
      {
         global.bgm_volume = 0;
      }
      if(global.sfx_volume &gt; 0.0)
      {
         global.sfx_volume -= 0.01;
      }
      else
      {
         global.sfx_volume = 0;
      }
      bv_audio_set_volume(global.bgm_handle, global.bgm_volume);
   }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Stop all sounds.

    global.bgm_handle = -1;
    audio_stop_all();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Reset Flags.

 // Flags:
    clear_bgm         = false;
    fadeout_flag      = false;
    global.bgm_volume = backup_bgm_volume;
    global.sfx_volume = backup_sfx_volume;    

    bv_stage_play_bgm(rm_character_select, msc_css, -1, -1, -1);
    bv_stage_play_bgm(rm_options_menu, msc_options, -1, -1, -1);
    bv_stage_play_bgm(rm_credits, msc_credits, -1, -1, -1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Free audio.
 
    audio_stop_all();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
