<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>ico_null</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Finish up.
 
    room_goto_next();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Center screen.
  
    window_center();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Change Display config.

 // Scale:
    if(global.display_fullscreen == false)
    {
       window_set_size(global.display_width * global.display_scale, global.display_height * global.display_scale)
       if(window_get_fullscreen() == true)
       {
          window_set_fullscreen(false);
       }
       alarm[1] = 5;
    }
    else
    {
       window_set_size(global.display_width, global.display_height)    
       window_set_fullscreen(true);
    }
    
 // Center.
    alarm[1] = 1;
    
 // VSync:
    display_reset(0, global.display_vsync);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init. Variables.
 
 // Setup palette system
    pal_swap_init_system(shd_pal_swapper);

 // First, check if the configuration folder exists. If it doesn't, create it to prevent the game from closing.
 //////////////////////////////////////////////////////////////////////////////////////////////////// 
    if(directory_exists(working_directory+"\Engine\Config") == false)
    {
       directory_create(working_directory+"\Engine\Config");
       
       // Restart the game. Since we didn't load anything else this shouldn't take long.
          game_restart();          
          exit;
    }
    
 // Settings:
 ////////////////////////////////////////////////////////////////////////////////////////////////////   
    if(file_exists(working_directory+"\Engine\Config\Display.hzc") == false)
    {
       // Display:
          global.setting_display_scale      = 3; // The screen scale. (1 to 4)
          global.setting_display_fullscreen = 0; // Is the game in fullscreen?
          global.setting_display_vsync      = 0; // Is the game using vsync?
          global.setting_display_alt_sync   = 0; // Is the game using alt. sync? Only used in studio.
          bv_config_save_display();
    }
    else
    {
          global.setting_display_scale      = bv_text_readline(working_directory+"\Engine\Config\Display.hzc", false, 0);
          global.setting_display_fullscreen = bv_text_readline(working_directory+"\Engine\Config\Display.hzc", false, 1);
          global.setting_display_vsync      = bv_text_readline(working_directory+"\Engine\Config\Display.hzc", false, 2);
          global.setting_display_alt_sync   = bv_text_readline(working_directory+"\Engine\Config\Display.hzc", false, 3);
    }
    
    if(file_exists(working_directory+"\Engine\Config\Audio.hzc") == false)
    {              
       // Sound:
          global.setting_music_vol = 1; // The volume for background music.
          global.setting_sound_vol = 1; // The volume for sound effects.
          global.setting_event_vol = 1; // The volume for events.          
          bv_config_save_audio();          
    }
    else
    {
          global.setting_music_vol = bv_text_readline(working_directory+"\Engine\Config\Audio.hzc", false, 0);
          global.setting_sound_vol = bv_text_readline(working_directory+"\Engine\Config\Audio.hzc", false, 1);
          global.setting_event_vol = bv_text_readline(working_directory+"\Engine\Config\Audio.hzc", false, 2);
    }
    
    if(file_exists(working_directory+"\Engine\Config\Input.hzc") == false)
    {        
       // Input:   
          global.setting_input_up               = 38;
          global.setting_input_down             = 40;
          global.setting_input_left             = 37;
          global.setting_input_right            = 39;
          global.setting_input_button_a         = 65;
          global.setting_input_button_b         = 83;
          global.setting_input_button_s         = 13;
          global.setting_input_gamepad_button_a = -1;
          global.setting_input_gamepad_button_b = -1;
          global.setting_input_gamepad_button_s = -1;     
          global.setting_input_gamepad_deadzone = 0.5;           
          bv_config_save_input();
    }
    else
    {
          global.setting_input_up               = bv_text_readline(working_directory+"\Engine\Config\Input.hzc", false, 0);
          global.setting_input_down             = bv_text_readline(working_directory+"\Engine\Config\Input.hzc", false, 1);
          global.setting_input_left             = bv_text_readline(working_directory+"\Engine\Config\Input.hzc", false, 2);
          global.setting_input_right            = bv_text_readline(working_directory+"\Engine\Config\Input.hzc", false, 3);
          global.setting_input_button_a         = bv_text_readline(working_directory+"\Engine\Config\Input.hzc", false, 4);
          global.setting_input_button_b         = bv_text_readline(working_directory+"\Engine\Config\Input.hzc", false, 5);
          global.setting_input_button_s         = bv_text_readline(working_directory+"\Engine\Config\Input.hzc", false, 6);          
          global.setting_input_gamepad_button_a = bv_text_readline(working_directory+"\Engine\Config\Input.hzc", false, 7);
          global.setting_input_gamepad_button_b = bv_text_readline(working_directory+"\Engine\Config\Input.hzc", false, 8);
          global.setting_input_gamepad_button_s = bv_text_readline(working_directory+"\Engine\Config\Input.hzc", false, 9); 
          global.setting_input_gamepad_deadzone = bv_text_readline(working_directory+"\Engine\Config\Input.hzc", false, 10);              
    }
    
    if(file_exists(working_directory+"\Engine\Config\Gameplay.hzc") == false)
    {        
       // Gameplay:
          global.setting_gameplay_spindash      = true;
          global.setting_gameplay_dropdash      = true;
          global.setting_gameplay_peelout       = false;
          global.setting_gameplay_aerial_lock   = false;
          global.setting_gameplay_roll_trigger  = true;
          global.setting_gameplay_camera_lag    = true;
          global.setting_gameplay_rotation      = false;          
          global.setting_gameplay_time_over     = false;         
          bv_config_save_gameplay();
    }
    else
    {
          global.setting_gameplay_spindash     = bv_text_readline(working_directory+"\Engine\Config\Gameplay.hzc", false, 0);
          global.setting_gameplay_dropdash     = bv_text_readline(working_directory+"\Engine\Config\Gameplay.hzc", false, 1);
          global.setting_gameplay_peelout      = bv_text_readline(working_directory+"\Engine\Config\Gameplay.hzc", false, 2);
          global.setting_gameplay_aerial_lock  = bv_text_readline(working_directory+"\Engine\Config\Gameplay.hzc", false, 3);
          global.setting_gameplay_roll_trigger = bv_text_readline(working_directory+"\Engine\Config\Gameplay.hzc", false, 4);
          global.setting_gameplay_camera_lag   = bv_text_readline(working_directory+"\Engine\Config\Gameplay.hzc", false, 5);
          global.setting_gameplay_rotation     = bv_text_readline(working_directory+"\Engine\Config\Gameplay.hzc", false, 6);                 
          global.setting_gameplay_time_over    = bv_text_readline(working_directory+"\Engine\Config\Gameplay.hzc", false, 7);            
    } 
    
 // Global variables:
 ////////////////////////////////////////////////////////////////////////////////////////////////////
    global.clives       = 3; // Amount of lives for the character.
    global.crings       = 0; // Amount of Rings the character has collected.
    global.crings_check = 1; // Used to gain lives when the ring counter hits * 100.
    global.cscore       = 0; // Current score amount.
    global.cscore_mtp   = 0; // Used to multiply score given by breaking badniks.
    global.gravity_angle = 1; // Gravity angle.
    global.cemeralds     = 7;     // The amount of emeralds the player has.
    
 // Input (Keyboard):
 //////////////////////////////////////////////////////////////////////////////////////////////////// 
    global.ip_up       = global.setting_input_up;
    global.ip_down     = global.setting_input_down;
    global.ip_left     = global.setting_input_left;
    global.ip_right    = global.setting_input_right;
    global.ip_button_a = global.setting_input_button_a;
    global.ip_button_b = global.setting_input_button_b;
    global.ip_button_s = global.setting_input_button_s;
    
 // Input (Gamepad):
 //////////////////////////////////////////////////////////////////////////////////////////////////// 
    global.dip_exists    = joystick_exists(0);
    global.dip_button_a  = global.setting_input_gamepad_button_a;
    global.dip_button_b  = global.setting_input_gamepad_button_b;
    global.dip_button_s  = global.setting_input_gamepad_button_s;
    
 // Display:
 //////////////////////////////////////////////////////////////////////////////////////////////////// 
    global.display_width      = 240;                               // Width of the Display Window.
    global.display_height     = 160;                               // Height of the Display Window.
    global.display_scale      = global.setting_display_scale;      // Scale of the display window. 
    global.display_fullscreen = global.setting_display_fullscreen; // Is the display window fullscreen?
    global.display_vsync      = global.setting_display_vsync;      // Is the game using vsync?
    global.display_alt_sync   = global.setting_display_alt_sync;   // Is the game using alt sync? (Only in studio)
    global.display_hud        = false;                             // Is the game displaying the HUD?
    
 // Audio:
 //////////////////////////////////////////////////////////////////////////////////////////////////// 
    global.bgm_volume = global.setting_music_vol; // Volume for Music tracks.
    global.sfx_volume = global.setting_sound_vol; // Volume for Sound effects.
    global.ev_volume  = global.setting_event_vol; // Volume for events.
    global.ring_pan   = 1;                        // Pan of the ring sound.
    
 // Fonts:
 //////////////////////////////////////////////////////////////////////////////////////////////////// 
    global.font_hud     = font_add_sprite_ext(spr_font_hud, "0123456789-", 0, 1);
    global.font_menu    = font_add_sprite(spr_font_menu, ord("0"), 1, 0);

 // Level:
 //////////////////////////////////////////////////////////////////////////////////////////////////// 
    global.checkpoint_x     = -1;    // X position for checkpoint respawning.
    global.checkpoint_y     = -1;    // Y position for checkpoint respawning.
    global.checkpoint_t     =  0;    // Time before we hit the checkpoint.
    global.character_handle = noone; // Current (Main) character id. 
    global.cpu_handle       = noone; // Current (CPU) character id.
    global.character_index  = CHAR_KNUX; // The character index. (Human Player)
    global.cpu_index        = 0;     // The character index. (CPU Player)  
      
 // Create master objects.
 // These objects are always active.
 //////////////////////////////////////////////////////////////////////////////////////////////////// 
    instance_create(0, 0, ctr_display);
    instance_create(0, 0, ctr_gamepad);
    instance_create(0, 0, ctr_audio);
    
 // Room Views:
 // Automatically set the data for each room after this one using our display variables.
 ////////////////////////////////////////////////////////////////////////////////////////////////////
    for(i=0; i&lt;999; i+=1)
    {
        if(room_exists(i))
        {
           room_set_view_enabled(i, true);
           room_set_view(i, 0, true, 0, 0, global.display_width, global.display_height, 0, 0, global.display_width, global.display_height, global.display_width/2, global.display_height/2, -1, -1, noone);           
        }
    }
    
 // Resize Window.
 ////////////////////////////////////////////////////////////////////////////////////////////////////
    alarm[0] = 5;
 
 // Done, go to the next room.
 //////////////////////////////////////////////////////////////////////////////////////////////////// 
    alarm[2] = 10;
    
    
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
