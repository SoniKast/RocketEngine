<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-9000004</depth>
  <persistent>0</persistent>
  <parentName>ctr_indestructible</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Variables.

    // Time and Ring text.
    time_yscale       = 0; // Horizontal Position of the Japanese Zone Text
    ring_yscale       = 0; // Vertical Position of the Japanese Zone Text
    time_bonus_yscale = 0;
    ring_bonus_yscale = 0;
    time_x            = 50;
    time_y            = 95;
    ring_x            = 50;
    ring_y            = 117;
    time_bonus_x      = 138;
    time_bonus_y      = 83;
    ring_bonus_x      = 138;
    ring_bonus_y      = 105;
   
    // Act position
    act_x         = 240; // Horizontal Position of the Act Text
    act_y         = 126; // Vertical Position of the Act Text
    act_scroll   = false;
   
    // Title Card State and misc. variables.
    results_state = 1;    // State of the title card.
    results_delay = 16;   // Delays the title card drawing.
    state_delay   = -1;   // Delays the state
   
    // Results variables
    bonus_total     = 0;
    bonus_time      = 0;
    bonus_ring      = (global.crings * 100);
    bonus_decrement = 100;

    // Set the time bonus:    
    seconds = floor(global.game_time/1000); 
    if(seconds &lt;= 29)
    {
       bonus_time = 50000;
    }
    else if(seconds &gt; 29 &amp;&amp; seconds &lt;= 44)
    {
        bonus_time = 10000;
    }
    else if(seconds &gt;= 45 &amp;&amp; seconds &lt;= 59)
    {
        bonus_time = 5000;
    }
    else if(seconds &gt;= 60 &amp;&amp; seconds &lt;= 89)
    {
        bonus_time = 4000;
    }
    else if(seconds &gt;= 90 &amp;&amp; seconds &lt;= 119)
    {
        bonus_time = 3000;
    }
    else if(seconds &gt;= 120 &amp;&amp; seconds &lt;= 179)
    {
        bonus_time = 2000;
    }
    else if(seconds &gt;= 180 &amp;&amp; seconds &lt;= 239)
    {
        bonus_time = 1000;
    }
    else if(seconds &gt;= 240 &amp;&amp; seconds &lt;= 299)
    {
        bonus_time = 500;
    }
    else if(seconds &gt;= 300)
    {
        bonus_time = 0;
    }

 // Set values for skipping:    
    bonus_skip      = bonus_ring + bonus_time;
    bonus_current   = global.cscore;    
    
 // Disable checkpoint data.
    global.checkpoint_x = -1;
    global.checkpoint_y = -1;
    global.checkpoint_t =  0; 
       
 // Allow counting:
    can_do          = 0; 
    can_count       = 0;
    result_counting = 0;
    
 // Skip:
    can_skip = 0; 
    
 // Positions / Going out:
    going_out      =  0;
    go_off         =  global.display_width;
    go_off_2       = -global.display_width;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Go to the next act or zone
    with(instance_create(x, y, obj_fade_to))
    {
        fade_to = bv_stage_order();
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// End it.

    if(going_out = 0)
    {
       if(go_off_2 &lt; 0)
       {
          go_off_2 += 20;
       }
    }
    else
    {
        results_state = 3;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Going out.
    
    if(going_out = 0)
    {
       if(go_off &gt; 0)
       {
          go_off -= 20;
          alarm[1] = 1;
       }
       else
       {
          alarm[2] = 1;
       }
    }
    else
    {
       alarm[2] = 1; 
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Start counting.
   
    result_counting = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Move Title card.          
    if(going_out = 0)
    {
        if(state_delay &gt; 0)
        {
           state_delay -= 1;
        }
        if(state_delay == 0)
        {
           results_state = 2;
        }    
        if(results_delay &gt; 0)
        {
           results_delay -= 1;
        }
        else 
        {
            // Appear.
            if(results_state == 1)
            {
               if(act_x != 0)
               {
                  act_x = approach(act_x, 0, 12);
               }
               if(act_x == 0)
               {
                  if(act_y != 42)
                  {
                     act_y  = approach(act_y, 42, 12);
                     act_scroll = true;
                     state_delay = 2;
                  }
               }  
            }
             
            // Skip:
            if(result_counting == true)
            {
                if(keyboard_check_pressed(global.ip_button_s) || joy_pressed(0, global.dip_button_s) &amp;&amp; can_skip == 1)
                {
                    can_skip   = 0;
                    bonus_time = 0;
                    bonus_ring = 0;
                    global.cscore = bonus_current + bonus_skip;
                }
                
                // Counting:
                var change;
                if(bonus_time &gt; 0)
                {
                   change         = min(bonus_time, bonus_decrement);
                   bonus_time    -= change;
                   global.cscore += change;
                }
                if(bonus_ring &gt; 0)
                {
                   change         = min(bonus_ring, bonus_decrement);
                   bonus_ring    -= change;
                   global.cscore += change;                   
                }
                
                // Sounds:
                if(bonus_ring &gt; 0 || bonus_time &gt; 0)
                {
                    if(audio_is_playing(_general_score_add) == 0)
                    {
                       bv_audio_play(_general_score_add, global.sfx_volume); 
                    }                         
                }
                
                // Finish:
                if(not(bonus_ring &gt; 0 || bonus_time &gt; 0))
                {
                   // Stop Sound:
                    if(audio_is_playing(_general_score_add) == 1)
                    {
                        bv_audio_stop(_general_score_add)
                    }
                      
                   // Finish up:
                    if(can_do == 0)
                    {
                        count_sound   = 0;
                        global.crings = 0;
                        can_do        = 1;
                        if(audio_is_playing(_general_score_total) == 1)
                        {
                            bv_audio_stop(_general_score_total)
                        }
                        bv_audio_play(_general_score_total, global.sfx_volume);        
                    }
                    if(can_do = 1 &amp;&amp; audio_is_playing(_general_score_total) == false)
                    {
                        can_do = 2;
                    }
                    if(going_out = 0 &amp;&amp; can_do == 2)
                    {
                        if(audio_is_playing(_ev_act_clear) == false)
                        {
                            going_out = 1
                            alarm[1] = 100;
                        }
                    }    
                    var near_warp = instance_nearest(x, y, obj_goal_warp)
                    var near_player = instance_nearest(x, y, par_character)
                    with(near_warp)
                    {
                        instance_destroy();
                    }
                    with(near_player)
                    {
                        goal_state = 1;
                    }
                    with(ctr_camera)
                    {
                        cam_handle = noone;
                    }           
                }
            }
        }
    }      
    // Disappear.
    if(results_state == 2)
    {          
         if(act_scroll == true)
         {
            act_x -= 3.5;
         }
         
         if(time_yscale != 1)
         {
            time_yscale = approach(time_yscale, 1, 0.06);
         }
         if(time_yscale = 1)
         {
            ring_yscale = approach(ring_yscale, 1, 0.06);
         }
         if(ring_yscale = 1)
         {
            time_bonus_yscale = approach(time_bonus_yscale, 1, 0.06);
         }
         if(time_bonus_yscale = 1)
         {
            ring_bonus_yscale = approach(ring_bonus_yscale, 1, 0.06);
            if(result_counting == false)
             {
                 if(alarm[0] == -1)
                 {
                     alarm[0] = 180;
                     can_skip = 1;
                 }
             }
         }
         
    }
            
    if(results_state == 3)
    {
        act_scroll = false;
        act_x = approach(act_x, -36000, 8);
        time_x = approach(time_x, -400, 8);
        ring_x = approach(ring_x, -400, 8);
        time_bonus_x = approach(time_bonus_x, -600, 8);
        ring_bonus_x = approach(ring_bonus_x, -600, 8);
        if(ring_bonus_x &lt;= -400)
        {
            if(alarm[3] == -1)
            {
                alarm[3] = 40;
            }
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw elements.

    draw_set_halign(fa_right);
    
 // Act Text
    for(i=0; i&lt;9; i+=1)
    {
        switch(global.character_index)
        {
            case CHAR_SONIC:
            draw_sprite(spr_results_act_s, stg.zone_act-1, view_xview+act_x+(i*sprite_get_width(spr_results_act)), view_yview+act_y);
            break;
            case CHAR_TAILS:
            draw_sprite(spr_results_act_t, stg.zone_act-1, view_xview+act_x+(i*sprite_get_width(spr_results_act)), view_yview+act_y);
            break;
            case CHAR_KNUX:
            draw_sprite(spr_results_act_k, stg.zone_act-1, view_xview+act_x+(i*sprite_get_width(spr_results_act)), view_yview+act_y);
            break;
            case CHAR_AMY:
            draw_sprite(spr_results_act_a, stg.zone_act-1, view_xview+act_x+(i*sprite_get_width(spr_results_act)), view_yview+act_y);
            break;
            case CHAR_SHADOW:
            draw_sprite(spr_results_act, stg.zone_act-1, view_xview+act_x+(i*sprite_get_width(spr_results_act)), view_yview+act_y);
            break;
        }
    }
    
 // Time and Ring Bonus
    draw_sprite_ext(spr_results_time_bonus, 0, view_xview+time_x, view_yview+time_y, image_xscale, time_yscale, 0, c_white, 1);
    draw_sprite_ext(spr_results_ring_bonus, 0, view_xview+ring_x, view_yview+ring_y, image_xscale, ring_yscale, 0, c_white, 1);
     
 // Draw bonuses:
    draw_set_color(c_white);
    draw_set_font(global.font_hud);
    draw_set_halign(fa_left);
    
    draw_text_transformed(view_xview+time_bonus_x, view_yview+time_bonus_y, ''+string(bonus_time), image_xscale, time_bonus_yscale, 0);
    draw_text_transformed(view_xview+ring_bonus_x, view_yview+ring_bonus_y, ''+string(bonus_ring), image_xscale, ring_bonus_yscale, 0);
    
    draw_set_halign(-1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
