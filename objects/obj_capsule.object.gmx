<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_capsule</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>par_no_angle_change_solid</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
capsule_state = "locked" // Locked, Breaking, Unlocked
capsule_open  = false;
capsule_frame = 0;
instance_create(x, y, obj_capsule_switch);
capsule_mask = instance_create(x, y, obj_capsule_mask);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(in_view())
{
    with(ctr_camera)
    {
        cam_handle = instance_nearest(x, y, obj_capsule);
        limit_left  = instance_nearest(x, y, obj_capsule).x-view_wview/2;
        limit_right = instance_nearest(x, y, obj_capsule).x+view_wview/2;
    }
}
    switch(capsule_state)
    {
        case "locked":
        capsule_frame = 0;
        break;
        case "breaking":
        capsule_frame = 1;
        capsule_open = true;
        capsule_state = "unlocked";
        break;
        case "unlocked":
        if(capsule_open = true)
        {
            if(instance_exists(capsule_mask))
            {
                with(capsule_mask)
                {
                    instance_destroy();
                }
            }
            if(!instance_exists(obj_capsule_door_l))
            {
                with(instance_create(x-16, y-4, obj_capsule_door_l))
                {
                    x_speed = -3;
                    y_speed = -3;
                }
                with(instance_create(x+16, y-4, obj_capsule_door_r))
                {
                    x_speed = 3;
                    y_speed = -3;
                }
                
            // Disable timer.
                global.do_time = 0;       
            
            // Reset checkpoint.
                global.checkpoint_x = -1;
                global.checkpoint_y = -1;
                global.checkpoint_t =  0;
                instance_create(x, y, obj_results);
                capsule_open = false;
            }
        }
        with(instance_nearest(x, y, par_character))
        {
            x_speed = 0;
            state = CS_GOAL_CAPSULE;
            animation_direction = 1;
            input_left = false;
            input_right = false;
            input_action = false;
        }
        break;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite(spr_capsule_spine, 0, x, y);
switch(capsule_state)
{
    case "locked":
    case "breaking":
    draw_sprite(spr_capsule, capsule_frame, x, y);
    break;
    case "unlocked":
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
